'use strict';

// This represents a persistent database for notifications
let pretendNotificationsStore = {
    user: [],
    staff: [
        'Archived notification 1'
    ],
    admin: [
        'Archived admin notification 1'
    ]
}, staffRoom = 'staff:notifications';

function processSomething(callback) {
    setTimeout(() => {
        callback();
    }, 0);
}

exports.sockets = [
    {
        event: 'subscribe:notifications',
        onEvent: ({socket, message}, callback) => {
            let role = socket.user.role;

            // Place the socket in a role-specific channel for notifications (aka "room")
            socket.join(`${role}:notifications`, () => {
                callback(null, pretendNotificationsStore[role]);
            });
        },
        middleware: [],
        accessLevel: 'staff'
    },
    {
        event: 'process:something',
        onEvent: ({socket}, callback) => {
            let {role, username} = socket.user;

            // Do processing
            processSomething(() => {
                let notification = `Something was processed by ${username}!`;

                socket.broadcast.to(`${role}:notifications`).emit(`${role}:notification`, notification);
                pretendNotificationsStore[role].push(notification);

                callback(null, 'processing finished');
            });
        },
        accessLevel: 'staff'
    }
];
